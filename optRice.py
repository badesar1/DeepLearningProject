import os
import torch

class riceML(torch.nn.Module):
    def __init__(self):
        super(riceML, self).__init__()

        coeffs = [[-4.77479228586247e-16,-3.95893559772862e-15,-9.17422334726253e-15,-2.12953290177934e-14,-4.97378014634527e-14,-1.15842661234598e-13,-2.69850850113006e-13,2.34056224201884e-16,-5.93619993192379e-16,-4.30342719222917e-16,4.38182455823315e-16,5.42271335089975e-17,-7.14345794419928e-16,-3.50701726875046e-17,-1.07905323280984e-16,1.97936134193490e-16,2.64566982906942e-16,-1.77488023126585e-16,-8.53179697617213e-16,-1.87970534797220e-14,1.84250397334255e-14,-1.09516797440483e-15,4.01910278994160e-15,5.74058916931019e-14,2.98908820357241e-13,1.63540113564563e-12,-8.39084597297431e-14,-1.63804201585187e-13,-4.12895076226289e-14,2.90997026617237e-13,3.16140595398782e-12,3.84861663555519e-11,4.88085482291448e-10,6.14474218575456e-09,7.68689966044324e-08,9.47605570688131e-07,1.12923752559766e-05,0.000124502963711891,0.00115175316764935,0.00721432740642934,0.0170290973259655,-0.0552773655185394,-0.330148484191879,-0.665358185286145,-0.940047688013717,-1.18222433882683,-1.41123072148152,-1.63336965143469,-1.85152617309389,-2.06725630010225],[2.57736437049137e-08,6.33788130139061e-08,9.64984129484547e-08,1.47017217086359e-07,2.24674673039581e-07,3.42876697337592e-07,5.23327910103704e-07,-2.96110161916683e-10,5.00662855648510e-10,2.24649625540382e-10,-1.41490377967686e-10,-6.98420919114726e-12,1.08046526791008e-10,5.66583909897636e-12,6.08428300647854e-12,-6.83134133528921e-12,-6.73618150116057e-12,3.79613953739186e-12,1.41194481665001e-11,2.35909521925477e-10,-1.43378241795578e-10,3.05909602129108e-12,-2.49217998758174e-11,-1.67842386820567e-10,-5.77497689052100e-10,-2.06441360909375e-09,7.06943707631963e-11,9.14546766713892e-11,1.26178263228404e-11,-7.90885833395231e-11,-5.74667256118465e-10,-4.61395832897014e-09,-3.83113017797924e-08,-3.16046127777673e-07,-2.59148597048527e-06,-2.09546246823208e-05,-0.000164061389599386,-0.00119313557277933,-0.00735385902187932,-0.0316067141044432,-0.0597297642233455,0.0604371974889846,0.378105364157986,0.638942771549081,0.779216668433833,0.859933826222933,0.909874121084333,0.941592349919185,0.961993132099056,0.975207268262478],[2.57736437049137e-15,1.60121371936572e-14,3.72133563289532e-14,8.65406868370676e-14,2.01873692934058e-13,4.70258927784440e-13,1.09558592776153e-12,0.250089986881226,0.249896180185515,0.249970819510184,0.250011156541232,0.250000082567624,0.249995967003359,0.249999799936500,0.249999916307324,0.250000053342714,0.250000037488563,0.249999970328690,0.249999924508723,0.249999020754094,0.250000371907190,0.250000004879269,0.250000053294606,0.250000182543935,0.250000415539391,0.250000970905004,0.249999977860363,0.249999981012480,0.249999998691134,0.250000008338747,0.250000040608612,0.250000214998322,0.250001168803918,0.250006318524353,0.250033965814300,0.250180222132426,0.250927956110606,0.254461773708280,0.268426059752265,0.305125067700937,0.335484111459036,0.260197492896561,0.121240261887441,0.0444048980028588,0.0172825311316197,0.00709573020385904,0.00297192903518713,0.00125702826416449,0.000534636446953848,0.000228147292640037],[2.32479403922517e-22,3.06069828615456e-21,1.08578422756374e-20,3.85423769257806e-20,1.37237043588225e-19,4.87980137070898e-19,1.73534172855308e-18,1.19876369141705e-06,1.82839642622657e-06,2.79173074499948e-06,4.26203560944736e-06,6.50535957037764e-06,9.92973426269198e-06,1.51571571735418e-05,2.31361678105916e-05,3.53154815958871e-05,5.39061822100657e-05,8.22833429706875e-05,0.000125598750112709,0.00133692587430235,-0.000327665245504514,-2.09426115394442e-05,-4.80234888722234e-05,-8.75390791092973e-05,-0.000131990681444779,-0.000201646989653900,3.05401218360071e-06,1.73517326474299e-06,4.48492704447195e-08,-4.13982617759016e-07,-1.35386335172617e-06,-4.72592091639139e-06,-1.68211581406802e-05,-5.95983029087555e-05,-0.000210092938316754,-0.000731982410517911,-0.00248249196757584,-0.00792060039146202,-0.0221101206452954,-0.0470184753434073,-0.0616481371554366,-0.0405588081698718,-0.0132900433589002,-0.00313924384201977,-0.000786981429731715,-0.000210258895497131,-5.74967777423134e-05,-1.59011895286269e-05,-4.42544639632622e-06,-1.23629086864540e-06],[2.07222370795896e-29,5.24499897960803e-28,2.84015397757425e-27,1.53889972042311e-26,8.36405056343875e-26,4.53963473042892e-25,2.46420732789992e-24,3.85478743505721e-12,8.97450879347008e-12,2.09164184902215e-11,4.87421112280737e-11,1.13561739987082e-10,2.64589025885742e-10,6.16489131761229e-10,1.43639063733793e-09,3.34672280061414e-09,7.79770235442699e-09,1.81682658413440e-08,4.23311761477406e-08,1.26959157773430e-06,-7.38333192308418e-07,-5.78632879352749e-07,-1.40657498078490e-06,-3.35626939504455e-06,-7.80613733226208e-06,-1.81902116327007e-05,-0.0157815061064867,-0.0156837288819401,-0.0156247083913032,-0.0156163839810549,-0.0156060486295361,-0.0155813891474698,-0.0155233611974233,-0.0153889333254048,-0.0150790173364852,-0.0143744729378246,-0.0128239655300926,-0.00965731832589816,-0.00420010853632390,0.00220003939682563,0.00485454201701615,0.00262450913026942,0.000599278400337884,9.21177688206341e-05,1.49581681794880e-05,2.60681215722324e-06,4.66019607657429e-07,8.43329940943753e-08,1.53652688423037e-08,2.81084670417233e-09]]
        self.Nbatches = 50
        self.coeffs = torch.Tensor(coeffs)
        self.args = torch.hstack((torch.zeros(1), torch.logspace(-7, 2, self.Nbatches)))
        
        self.iscuda = torch.cuda.is_available()
        if self.iscuda:
            self.coeffs = self.coeffs.cuda()
            self.args = self.args.cuda()

    def fit_piecewise_I0(self, x):
        X_fit = torch.hstack((torch.ones_like(x), x, x**2, x**3, x**4))
        y_all = X_fit @ self.coeffs

        bins = torch.bucketize(x, self.args) - 1
        bins[bins==self.Nbatches] -= 1

        ybin = torch.zeros(x.size(0))
        if self.iscuda:
            ybin = ybin.cuda()

        for i in range(0, x.size(0)):
            ybin[i] = y_all[i, bins[i]] 
        ybin[ybin<=0] = 0

        return ybin

    def forward(self, out, im_rice, sigma, im_clean): 
        sigma = sigma.view(-1,1,1,1)
        mss = torch.mean((im_rice**2 + out**2) / (2 * sigma**2), axis=[-2,-1])
        snrsq = torch.mean((out * im_rice) / (sigma**2), axis=[-2,-1])
        logI = self.fit_piecewise_I0(snrsq)
        offset = torch.mean(torch.log(im_rice / sigma**2), axis=[-2,-1])
        mse = 100*torch.mean((out - im_clean)**2, axis=[-2,-1])

        self.rice = (-torch.mean(offset) - torch.mean(logI) + torch.mean(mss))
        self.mse = 100*torch.mean(mse)
        
        return torch.sum(-offset + mss - logI + mse)  / (2 * out.size(0))
        #return torch.sum(mse)  / (2 * out.size(0))

